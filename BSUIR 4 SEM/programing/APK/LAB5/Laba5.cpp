#include<stdio.h>
#include<dos.h>
#include <stdlib.h>

int exitFlag = 0; // Пункт 1: Объявление и инициализация глобальной переменной для выхода из программы

void interrupt(*oldint9)(...); // Пункт 4: Объявление указателя на старое прерывание

void indicator(int); // Объявление функции для управления индикаторами клавиатуры

void interrupt newint9(...) // Пункт 3: Новое прерывание для обработки ввода с клавиатуры
{
    unsigned char scan_code = inp(0x60);
    if (scan_code == 1) // Пункт 2: Проверка нажатия клавиши ESC
    {
        exitFlag = 1; // Установка флага выхода из программы
    }
    if (scan_code != 0xFA)
    {
        indicator(0x17); // Управление индикаторами
        printf("%X   ", scan_code); // Вывод кода в шестнадцатеричной форме
        indicator(0); // Управление индикаторами
    }
    (*oldint9)(); // Вызов старого прерывания
}

void indicator(int number)
{
    int i = 0;
    do
    {
        i++;
        while ((inp(0x64) & 0x02)); // Проверка незанятости входного буфера контроллера клавиатуры
        outp(0x60, 0xED); // Отправка команды для управления индикатором клавиатуры
        while ((inp(0x64) & 0x02)); // Проверка незанятости входного буфера контроллера клавиатуры
        outp(0x60, number); // Отправка команды установки определенного индикатора
    } while (inp(0x60) == 0xFE && i < 3); // Повторная отправка команды в случае необходимости
    if (i == 3)
    {
        printf("FE more 3 times"); // Вывод сообщения об ошибке, если команда не была выполнена более 3 раз
        exitFlag = 1; // Установка флага выхода из программы
    }
    delay(500); // Задержка
}

void main()
{
    oldint9 = getvect(0x09); // Получение адреса старого прерывания
    setvect(0x09, newint9); // Установка нового прерывания для обработки ввода с клавиатуры

    while (!exitFlag); // Пункт 1: Цикл ожидания выхода из программы

    setvect(0x09, oldint9); // Восстановление стандартного обработчика прерывания клавиатуры
}
